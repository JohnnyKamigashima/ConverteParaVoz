"""Copia arquivos
"""
import os
import shutil

from library.merge_mp3_files import convert_mp3_ogg, normalize_audio
from library.telegram_bot import audio_send
def copy_file(source_file, destination_file):
    """
    Copy a file from the source path to the destination path.

    Args:
        source_file (str): The path of the source file to be copied.
        destination_file (str): The path where the source file should be copied to.

    Returns:
        None
    """
    shutil.copyfile(source_file, destination_file)

def send_and_remove(output_file, ogg_output_file, chat_id, token):
    """
    Sends an audio file to a chat using the provided chat_id and token,
    after processing and converting it to OGG format.
    Removes the original and converted files after sending.

    Args:
        output_file (str): Path to the original audio file.
        ogg_output_file (str): Path to the converted OGG audio file.
        chat_id (int): ID of the chat to send the audio to.
        token (str): Token for the chat API.

    Returns:
        None
    """
    if os.path.exists(output_file):
        normalize_audio.process_files(Files=[output_file],target_dbfs=-70,directory='responses')
        convert_mp3_ogg(output_file)
        audio_send(chat_id, ogg_output_file, token)
        os.remove(output_file)
        os.remove(ogg_output_file)

def remove_files(response_file: str, audio_extension: str) -> None:
    """
    Removes the text and audio files generated by the text-to-speech conversion process.

    Args:
        response_file (str): The name of the response file.
        audio_extension (str): The extension of the audio file.

    Returns:
        None
    """
    if os.path.exists(response_file + '.txt'):
        os.remove(response_file + ".txt")
    if os.path.exists(response_file + '.' + audio_extension):
        os.remove(response_file + '.' + audio_extension)

def copy_audio_file(response_file, output_file, audio_extension):
    """
    Copies the audio file with the specified extension from the response_file to the output_file.

    Args:
    response_file (str): The path to the response file.
    output_file (str): The path to the output file.
    audio_extension (str): The extension of the audio file.

    Returns:
    None
    """
    if os.path.exists(response_file + '.' + audio_extension):
        copy_file(response_file + '.' + audio_extension, output_file)

